// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pb/calulator.proto

package calcpb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type CalulatorRequest struct {
	X                    int32    `protobuf:"varint,1,opt,name=x,proto3" json:"x,omitempty"`
	Y                    int32    `protobuf:"varint,2,opt,name=y,proto3" json:"y,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CalulatorRequest) Reset()         { *m = CalulatorRequest{} }
func (m *CalulatorRequest) String() string { return proto.CompactTextString(m) }
func (*CalulatorRequest) ProtoMessage()    {}
func (*CalulatorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed7f46e3fec9ab0c, []int{0}
}

func (m *CalulatorRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CalulatorRequest.Unmarshal(m, b)
}
func (m *CalulatorRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CalulatorRequest.Marshal(b, m, deterministic)
}
func (m *CalulatorRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CalulatorRequest.Merge(m, src)
}
func (m *CalulatorRequest) XXX_Size() int {
	return xxx_messageInfo_CalulatorRequest.Size(m)
}
func (m *CalulatorRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CalulatorRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CalulatorRequest proto.InternalMessageInfo

func (m *CalulatorRequest) GetX() int32 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *CalulatorRequest) GetY() int32 {
	if m != nil {
		return m.Y
	}
	return 0
}

type CalulatorResponse struct {
	Result               int32    `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CalulatorResponse) Reset()         { *m = CalulatorResponse{} }
func (m *CalulatorResponse) String() string { return proto.CompactTextString(m) }
func (*CalulatorResponse) ProtoMessage()    {}
func (*CalulatorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed7f46e3fec9ab0c, []int{1}
}

func (m *CalulatorResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CalulatorResponse.Unmarshal(m, b)
}
func (m *CalulatorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CalulatorResponse.Marshal(b, m, deterministic)
}
func (m *CalulatorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CalulatorResponse.Merge(m, src)
}
func (m *CalulatorResponse) XXX_Size() int {
	return xxx_messageInfo_CalulatorResponse.Size(m)
}
func (m *CalulatorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CalulatorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CalulatorResponse proto.InternalMessageInfo

func (m *CalulatorResponse) GetResult() int32 {
	if m != nil {
		return m.Result
	}
	return 0
}

func init() {
	proto.RegisterType((*CalulatorRequest)(nil), "CalulatorRequest")
	proto.RegisterType((*CalulatorResponse)(nil), "CalulatorResponse")
}

func init() { proto.RegisterFile("pb/calulator.proto", fileDescriptor_ed7f46e3fec9ab0c) }

var fileDescriptor_ed7f46e3fec9ab0c = []byte{
	// 147 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2a, 0x48, 0xd2, 0x4f,
	0x4e, 0xcc, 0x29, 0xcd, 0x49, 0x2c, 0xc9, 0x2f, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x57, 0xd2,
	0xe3, 0x12, 0x70, 0x86, 0x09, 0x05, 0xa5, 0x16, 0x96, 0xa6, 0x16, 0x97, 0x08, 0xf1, 0x70, 0x31,
	0x56, 0x48, 0x30, 0x2a, 0x30, 0x6a, 0xb0, 0x06, 0x31, 0x56, 0x80, 0x78, 0x95, 0x12, 0x4c, 0x10,
	0x5e, 0xa5, 0x92, 0x36, 0x97, 0x20, 0x92, 0xfa, 0xe2, 0x82, 0xfc, 0xbc, 0xe2, 0x54, 0x21, 0x31,
	0x2e, 0xb6, 0xa2, 0xd4, 0xe2, 0xd2, 0x9c, 0x12, 0xa8, 0x2e, 0x28, 0xcf, 0xc8, 0x91, 0x8b, 0x13,
	0xae, 0x58, 0xc8, 0x04, 0xcc, 0x49, 0x06, 0xf1, 0x52, 0x85, 0x04, 0xf5, 0xd0, 0x6d, 0x95, 0x12,
	0xd2, 0xc3, 0x30, 0x58, 0x89, 0xc1, 0x89, 0x23, 0x8a, 0x2d, 0x39, 0x31, 0x27, 0xb9, 0x20, 0x29,
	0x89, 0x0d, 0xec, 0x60, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x82, 0xe0, 0xb0, 0xb6, 0xc6,
	0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CalulatorClient is the client API for Calulator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CalulatorClient interface {
	Calculate(ctx context.Context, in *CalulatorRequest, opts ...grpc.CallOption) (*CalulatorResponse, error)
}

type calulatorClient struct {
	cc *grpc.ClientConn
}

func NewCalulatorClient(cc *grpc.ClientConn) CalulatorClient {
	return &calulatorClient{cc}
}

func (c *calulatorClient) Calculate(ctx context.Context, in *CalulatorRequest, opts ...grpc.CallOption) (*CalulatorResponse, error) {
	out := new(CalulatorResponse)
	err := c.cc.Invoke(ctx, "/Calulator/Calculate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CalulatorServer is the server API for Calulator service.
type CalulatorServer interface {
	Calculate(context.Context, *CalulatorRequest) (*CalulatorResponse, error)
}

func RegisterCalulatorServer(s *grpc.Server, srv CalulatorServer) {
	s.RegisterService(&_Calulator_serviceDesc, srv)
}

func _Calulator_Calculate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalulatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalulatorServer).Calculate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Calulator/Calculate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalulatorServer).Calculate(ctx, req.(*CalulatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Calulator_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Calulator",
	HandlerType: (*CalulatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Calculate",
			Handler:    _Calulator_Calculate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/calulator.proto",
}
